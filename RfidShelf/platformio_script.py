Import("env")
import os
import shutil
import array
import gzip



def after_build(source, target, env):
	shutil.copy(target[0].path, "./build/latest.bin")

def html_gzip(source, target, env):
	with open('./html/index_template.html', 'rb') as htmlFile:
		zippedData = gzip.compress(htmlFile.read())
	
	outfile = open('./src/ShelfHtml.cpp', 'w', newline='\n')
	
	cCode = '// DO NOT EDIT THIS FILE! WILL BE OVERWRITTEN DURING BUILD!\n'
	cCode += '#include "ShelfHtml.h"\n\n'
	cCode += 'const char ShelfHtml::INDEX[] PROGMEM = {\n'
	
	i = 0
	data_length = len(zippedData)
	for byte in zippedData:
		if (i % 12) == 0:
			cCode += '\t'
		cCode += '0x%02x' % byte

		if (i + 1) < data_length:
			cCode += ','
			if (i % 12) == 11:
				cCode += '\n'
			else:
				cCode += ' '

		i += 1

	cCode += '\n};\n\n'
	cCode +='const size_t ShelfHtml::INDEX_SIZE = ' + str(data_length) + ';'

	outfile.write(cCode)
	outfile.close()

env.AddPreAction("$BUILD_DIR/src/ShelfHtml.cpp.o", html_gzip)
env.AddPostAction("$BUILD_DIR/firmware.bin", after_build)